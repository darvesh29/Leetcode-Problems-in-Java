class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int start = 0;
        int end = arr.length-1;
        
        while(start<end)
        {
            int mid = start+(end-start)/2;

            if(arr[mid]>arr[mid+1])
            {
                // you are in decreasing part of array
                // this may be the answer but look at left
                //this is why end != mid-1
                
                end = mid;
            }
            else
            {
                // you are in increasing part of array
                start = mid+1; // bcz we know that mid+1 element > mid element
            }
        }
        // in the end ,start==end and pointing to the largest no. because of the two checks above
        // start and end always try to find max element in above two checks
        // hence , when they are pointing to just one element , that is the max element bcz thats what the check say
        // more elaboration = at every point of time for start and end they have the best possible answer till that time and if we are saying that only one item remaining , hence bcz of above line that is the best possible ans

        return start ;// or return end as both are equal
    }
}
