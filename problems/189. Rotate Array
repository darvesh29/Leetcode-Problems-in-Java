//Brute force approach , Time complexity = O(n*k)
class Solution {
    public void rotate(int[] nums, int k) {
                
            while(k>0)
            {
               for(int i=1 ; i<nums.length ;i++)
               {
                   //swap a[0] and a[i]
                   int temp = nums[0];
                   nums[0] = nums[i];
                   nums[i] = temp ; 
               }
                k--;
            }
    }
}

//Optimized Solution , Time complexity = O(n)
class Solution {
    public void rotate(int[] nums, int k) {
        k = k % nums.length; // handle the case where k is greater than n
        reverse(nums , 0 , nums.length-1) ; //reverse entire array
        reverse(nums , 0 ,k-1) ; //reverse first k elements
        reverse(nums , k ,nums.length-1 ) ; //reverse remaining elements
    }
    public void reverse(int[] nums , int start , int end)
    {
        while(start<end)
        {
           int temp = nums[start] ; 
           nums[start] = nums[end] ; 
           nums[end] = temp ;
           start++;
           end--;
        }
    }
}
